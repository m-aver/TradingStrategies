using System;
using System.Linq;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Printing;
using System.Windows.Forms;
using Fidelity.Components;
using WealthLab;

namespace TradingStrategies.Backtesting.Visualizers
{
    public class LiteTradesVisualizer : UserControl, IPerformanceVisualizer
    {
        private static readonly Color GainColor = Color.FromArgb(230, 255, 230);
        private static readonly Color LossColor = Color.FromArgb(255, 230, 230);
        private const string DateColumnsFormat = "dd.mm.yyyy HH:mm";

        private IVisualizerHost visualizerHost;

        private IContainer container;
        private SortableListView tableTrades;
        private StatusStrip status;
        private ToolStripStatusLabel labelTrades;
        private ToolStripStatusLabel labelNSF;
        private ToolStripStatusLabel statusTrades;
        private ToolStripStatusLabel statusNSF;
        private ContextMenuStrip popup;
        private ToolStripMenuItem mniCopy;

        private ColumnHeader strategyIdColumn;

        public string TabText => "Lite Trades";
        public string Description => "Displays a list of all of the trades (Positions) generated by the Strategy";
        public VisualizerAppliesTo AppliesTo => VisualizerAppliesTo.All;
        public bool SupportClipboardCopy => true;
        public bool SupportsPrint => false;

        public LiteTradesVisualizer()
        {
            InitializeComponent();
        }

        public void CopyToClipboard()
        {
            visualizerHost.CopyListViewToClipboard(tableTrades);
        }

        public void CreateVisualization(SystemPerformance performance, IVisualizerHost host)
        {
            if (performance.Strategy.StrategyType != StrategyType.CombinedStrategy)
            {
                tableTrades.Columns.Remove(strategyIdColumn);
            }

            visualizerHost = host;
            VisualizePerfomance(performance);
        }

        private void VisualizePerfomance(SystemPerformance perfomance)
        {
            statusTrades.Text = perfomance.Results.Positions.Count.ToString();
            statusNSF.Text = perfomance.Results.TradesNSF.ToString();

            tableTrades.DisableSort();
            tableTrades.BeginUpdate();
            tableTrades.Items.Clear();

            foreach (var position in perfomance.Results.Positions)
            {
                var currentRow = tableTrades.Items.Add(position.PositionType.ToString());
                currentRow.Tag = position;
                currentRow.UseItemStyleForSubItems = false;

                if (perfomance.Strategy.StrategyType == StrategyType.CombinedStrategy)
                {
                    currentRow.SubItems.Add(visualizerHost.LookupStrategyName(position.StrategyID));
                }

                var symbolCell = currentRow.SubItems.Add(position.Bars.Symbol);
                symbolCell.Font = new Font(tableTrades.Font, FontStyle.Bold);

                currentRow.SubItems.Add(position.Shares.ToString("N0"));
                currentRow.SubItems.Add(position.EntryDate.ToString(DateColumnsFormat));
                currentRow.SubItems.Add(position.EntryPrice.ToString("N2"));

                if (position.Active)
                {
                    currentRow.SubItems.Add("Open");
                    currentRow.SubItems.Add("Open");
                }
                else
                {
                    currentRow.SubItems.Add(position.ExitDate.ToString(DateColumnsFormat));
                    currentRow.SubItems.Add(position.ExitPrice.ToString("N2"));
                }

                var netProfitPercentCell = currentRow.SubItems.Add(position.NetProfitPercent.ToString("F2"));
                var netProfitCell = currentRow.SubItems.Add(position.NetProfit.ToString("C"));

                ColorizeCell(netProfitPercentCell, position.NetProfitPercent);
                ColorizeCell(netProfitCell, position.NetProfit);

                currentRow.SubItems.Add(position.BarsHeld.ToString("N0"));
                currentRow.SubItems.Add(position.EntrySignal);
                currentRow.SubItems.Add(position.ExitSignal);
            }

            ColorizeTable();
            tableTrades.EndUpdate();
        }

        private static void ColorizeCell(ListViewItem.ListViewSubItem cell, double pivot)
        {
            var color = pivot > 0.0 ? Color.Blue : Color.Red;
            cell.ForeColor = color;
        }

        private void ColorizeTable()
        {
            foreach(ListViewItem item in tableTrades.Items)
            {
                if (item.Tag is Position position)
                {
                    foreach (ListViewItem.ListViewSubItem cell in item.SubItems)
                    {
                        cell.BackColor = position.NetProfit > 0.0 ? GainColor : LossColor;
                    }
                }
            }
        }

        public void EnableControls(bool enable)
        {
            tableTrades.Enabled = enable;
        }

        public void Print()
        {
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && container != null)
            {
                container.Dispose();
            }

            base.Dispose(disposing);
        }

        private void mniCopy_Click(object sender, EventArgs e)
        {
            CopyToClipboard();
        }

        private void tableTrades_DoubleClick(object sender, EventArgs e)
        {
            if (tableTrades.SelectedItems.Count > 0)
            {
                ListViewItem item = tableTrades.SelectedItems[0];
                Position position = (Position)item.Tag;
                visualizerHost.SelectPosition(position);
            }
        }

        private void InitializeComponent()
        {
            container = new Container();
            status = new StatusStrip();
            labelTrades = new ToolStripStatusLabel();
            statusTrades = new ToolStripStatusLabel();
            labelNSF = new ToolStripStatusLabel();
            statusNSF = new ToolStripStatusLabel();
            tableTrades = new SortableListView();
            popup = new ContextMenuStrip(container);
            mniCopy = new ToolStripMenuItem();

            status.SuspendLayout();
            popup.SuspendLayout();
            this.SuspendLayout();

            status.Items.AddRange(new ToolStripItem[]
            {
                labelTrades,
                statusTrades,
                labelNSF,
                statusNSF
            });
            status.Location = new Point(0, 419);
            status.Name = "status";
            status.Size = new Size(846, 22);
            status.TabIndex = 1;
            status.Text = "statusStrip1";

            labelTrades.Name = "labelTrades";
            labelTrades.Size = new Size(176, 17);
            labelTrades.Text = "Trades included in backtest results:";

            statusTrades.BorderSides = ToolStripStatusLabelBorderSides.Right;
            statusTrades.Name = "statusTrades";
            statusTrades.Size = new Size(17, 17);
            statusTrades.Text = "0";

            labelNSF.Name = "labelNSF";
            labelNSF.Size = new Size(276, 17);
            labelNSF.Text = "Trades not included due to insufficient simulated capital:";

            statusNSF.Name = "statusNSF";
            statusNSF.Size = new Size(13, 17);
            statusNSF.Text = "0";

            var columnHeaders = new ColumnHeader[]
            {
                new ColumnHeader()
                {
                    Text = "Position",
                    Width = 50,
                },
                strategyIdColumn = new ColumnHeader
                {
                    Text = "Strategy"
                },
                new ColumnHeader()
                {
                    DisplayIndex = 2,
                    Text = "Symbol",
                    Width = 50,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 3,
                    Text = "Quantity",
                    TextAlign = HorizontalAlignment.Right,
                    Width = 50,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 4,
                    Text = "Entry Date",
                    TextAlign = HorizontalAlignment.Right,
                    Width = 100,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 5,
                    Text = "Entry Price",
                    TextAlign = HorizontalAlignment.Right,
                    Width = 75,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 6,
                    Text = "Exit Date",
                    TextAlign = HorizontalAlignment.Right,
                    Width = 100,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 7,
                    Text = "Exit Price",
                    TextAlign = HorizontalAlignment.Right,
                    Width = 75,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 8,
                    Text = "Profit %",
                    TextAlign = HorizontalAlignment.Right,
                    Width = 75,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 9,
                    Text = "Profit $",
                    TextAlign = HorizontalAlignment.Right,
                    Width = 75,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 10,
                    Text = "Bars Held",
                    TextAlign = HorizontalAlignment.Right,
                    Width = 75,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 11,
                    Text = "Entry Name",
                    Width = 75,
                },
                new ColumnHeader()
                {
                    DisplayIndex = 12,
                    Text = "Exit Name",
                    Width = 100,
                },
            };

            tableTrades.Columns.AddRange(columnHeaders);
            tableTrades.BackColor = SystemColors.Window;
            tableTrades.Dock = DockStyle.Fill;
            tableTrades.FullRowSelect = true;
            tableTrades.HideSelection = false;
            tableTrades.Location = new Point(0, 0);
            tableTrades.MultiSelect = false;
            tableTrades.Name = "TableTrades";
            tableTrades.Size = new Size(846, 419);
            tableTrades.TabIndex = 2;
            tableTrades.UseCompatibleStateImageBehavior = false;
            tableTrades.View = View.Details;
            tableTrades.DoubleClick += tableTrades_DoubleClick;

            popup.Items.AddRange(new ToolStripItem[]
            {
                mniCopy,
                //TODO: json
                //TODO: save to file
            });
            popup.Name = "popup";
            popup.Size = new Size(122, 70);

            mniCopy.ImageTransparentColor = Color.Fuchsia;
            mniCopy.Name = "mniCopy";
            mniCopy.Size = new Size(121, 22);
            mniCopy.Text = "Copy";
            mniCopy.ToolTipText = "Copy data to the clipboard";
            mniCopy.Click += mniCopy_Click;

            this.AutoScaleDimensions = new SizeF(6f, 13f);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ContextMenuStrip = popup;
            this.Controls.Add(tableTrades);
            this.Controls.Add(status);
            this.Name = nameof(LiteTradesVisualizer);
            this.Size = new Size(846, 441);

            status.ResumeLayout(false);
            status.PerformLayout();
            popup.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();
        }
    }
}
